name: Build and deploy API

on:
  push:
    branches:
      - main
    paths:
      - 'src/**' 
      - 'infrastructure/**'        
      - 'dockerfile'    
      - '.github/workflows/**' 

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Ensure the ECR repository exists
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names ${{ secrets.REPOSITORY_NAME }} --region ap-south-1 || \
          aws ecr create-repository --repository-name ${{ secrets.REPOSITORY_NAME }} --region ap-south-1

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t my-springboot-app:latest .

      # Tag the Docker image for ECR
      - name: Tag Docker image
        run: |
          REPOSITORY_URI=${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c 7)
          docker tag my-springboot-app:latest $REPOSITORY_URI:$IMAGE_TAG
          docker tag my-springboot-app:latest $REPOSITORY_URI:latest

      # Push the Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: |
          REPOSITORY_URI=${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/${{ secrets.REPOSITORY_NAME }}
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c 7)
          docker push $REPOSITORY_URI:$IMAGE_TAG
          docker push $REPOSITORY_URI:latest

  terraform:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-south-1'

      # Check for backend environment
      - name: Ensure S3 bucket for Terraform state exists
        run: |
          aws s3api head-bucket --bucket terraform-state-bucket-myproject 2>/dev/null || \
          aws s3api create-bucket --bucket terraform-state-bucket-myproject --region ap-south-1 --create-bucket-configuration LocationConstraint=ap-south-1
          aws dynamodb describe-table --table-name terraform-locks 2>/dev/null || \
          aws dynamodb create-table --table-name terraform-locks --attribute-definitions AttributeName=Id,AttributeType=S --key-schema AttributeName=Id,KeyType=HASH --billing-mode PAY_PER_REQUEST --region ap-south-1
      
          # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init
        working-directory: infrastructure

      # Validate Terraform
      - name: Validate Terraform
        run: terraform validate
        working-directory: infrastructure

      # Apply Terraform
      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: infrastructure

        